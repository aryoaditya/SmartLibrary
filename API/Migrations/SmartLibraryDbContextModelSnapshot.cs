// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(SmartLibraryDbContext))]
    partial class SmartLibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API.Models.Account", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expired_date");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit")
                        .HasColumnName("is_used");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date");

                    b.Property<int>("Otp")
                        .HasColumnType("int")
                        .HasColumnName("otp");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("username");

                    b.HasKey("Guid");

                    b.ToTable("tb_m_accounts");
                });

            modelBuilder.Entity("API.Models.AccountRole", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<Guid>("AccountGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_guid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date");

                    b.Property<Guid>("RoleGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_guid");

                    b.HasKey("Guid");

                    b.HasIndex("AccountGuid");

                    b.HasIndex("RoleGuid");

                    b.ToTable("tb_m_account_roles");
                });

            modelBuilder.Entity("API.Models.Book", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("author");

                    b.Property<int>("Copies")
                        .HasColumnType("int")
                        .HasColumnName("copies");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("edition");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nchar(6)")
                        .HasColumnName("id");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("publisher");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Guid");

                    b.ToTable("tb_m_books");
                });

            modelBuilder.Entity("API.Models.BookBorrower", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<Guid>("BookGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("book_guid");

                    b.Property<Guid>("BorrowerRecordGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("borrower_record_guid");

                    b.HasKey("Guid");

                    b.HasIndex("BookGuid");

                    b.HasIndex("BorrowerRecordGuid");

                    b.ToTable("tb_m_book_borrowers");
                });

            modelBuilder.Entity("API.Models.BookReturn", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<Guid>("BookGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("book_guid");

                    b.Property<Guid>("ReturnRecordGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("return_record_guid");

                    b.HasKey("Guid");

                    b.HasIndex("BookGuid");

                    b.HasIndex("ReturnRecordGuid");

                    b.ToTable("tb_m_book_returns");
                });

            modelBuilder.Entity("API.Models.BorrowerRecord", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("borrow_date");

                    b.Property<DateTime>("DateRequest")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_request");

                    b.Property<Guid>("MemberGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("member_guid");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<DateTime>("ReturnDeadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("return_deadline");

                    b.Property<Guid>("StaffGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("staff_guid");

                    b.HasKey("Guid");

                    b.HasIndex("MemberGuid");

                    b.HasIndex("StaffGuid");

                    b.ToTable("tb_m_borrower_records");
                });

            modelBuilder.Entity("API.Models.Member", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("birth_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nchar(6)")
                        .HasColumnName("id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("phone_number");

                    b.HasKey("Guid");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("tb_m_members");
                });

            modelBuilder.Entity("API.Models.ReturnRecord", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<Guid>("BorrowRecordGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("borrow_record_guid");

                    b.Property<Guid>("MemberGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("member_guid");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("return_date");

                    b.Property<Guid>("StaffGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("staff_guid");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Guid");

                    b.HasIndex("MemberGuid");

                    b.HasIndex("StaffGuid");

                    b.ToTable("tb_m_return_records");
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Guid");

                    b.ToTable("tb_m_roles");
                });

            modelBuilder.Entity("API.Models.Staff", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("birth_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nchar(6)")
                        .HasColumnName("id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("phone_number");

                    b.HasKey("Guid");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("tb_m_staffs");
                });

            modelBuilder.Entity("API.Models.Account", b =>
                {
                    b.HasOne("API.Models.Member", "Member")
                        .WithOne("Account")
                        .HasForeignKey("API.Models.Account", "Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Staff", "Staff")
                        .WithOne("Account")
                        .HasForeignKey("API.Models.Account", "Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("API.Models.AccountRole", b =>
                {
                    b.HasOne("API.Models.Account", "Account")
                        .WithMany("AccountRoles")
                        .HasForeignKey("AccountGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Role", "Role")
                        .WithMany("AccountRoles")
                        .HasForeignKey("RoleGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Models.BookBorrower", b =>
                {
                    b.HasOne("API.Models.Book", "Book")
                        .WithMany("BookBorrowers")
                        .HasForeignKey("BookGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.BorrowerRecord", "BorrowerRecord")
                        .WithMany("BookBorrowers")
                        .HasForeignKey("BorrowerRecordGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BorrowerRecord");
                });

            modelBuilder.Entity("API.Models.BookReturn", b =>
                {
                    b.HasOne("API.Models.Book", "Book")
                        .WithMany("BookReturns")
                        .HasForeignKey("BookGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.ReturnRecord", "ReturnRecord")
                        .WithMany("BookReturns")
                        .HasForeignKey("ReturnRecordGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("ReturnRecord");
                });

            modelBuilder.Entity("API.Models.BorrowerRecord", b =>
                {
                    b.HasOne("API.Models.ReturnRecord", "ReturnRecord")
                        .WithOne("BorrowerRecord")
                        .HasForeignKey("API.Models.BorrowerRecord", "Guid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.Member", "Member")
                        .WithMany("BorrowerRecords")
                        .HasForeignKey("MemberGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Staff", "Staff")
                        .WithMany("BorrowerRecords")
                        .HasForeignKey("StaffGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("ReturnRecord");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("API.Models.ReturnRecord", b =>
                {
                    b.HasOne("API.Models.Member", "Member")
                        .WithMany("ReturnRecords")
                        .HasForeignKey("MemberGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Staff", "Staff")
                        .WithMany("ReturnRecords")
                        .HasForeignKey("StaffGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("API.Models.Account", b =>
                {
                    b.Navigation("AccountRoles");
                });

            modelBuilder.Entity("API.Models.Book", b =>
                {
                    b.Navigation("BookBorrowers");

                    b.Navigation("BookReturns");
                });

            modelBuilder.Entity("API.Models.BorrowerRecord", b =>
                {
                    b.Navigation("BookBorrowers");
                });

            modelBuilder.Entity("API.Models.Member", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("BorrowerRecords");

                    b.Navigation("ReturnRecords");
                });

            modelBuilder.Entity("API.Models.ReturnRecord", b =>
                {
                    b.Navigation("BookReturns");

                    b.Navigation("BorrowerRecord");
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.Navigation("AccountRoles");
                });

            modelBuilder.Entity("API.Models.Staff", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("BorrowerRecords");

                    b.Navigation("ReturnRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
